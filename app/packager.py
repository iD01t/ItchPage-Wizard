"""
Asset Packager Module
Creates zip packages with all generated assets and templates
"""

from __future__ import annotations

import json
import os
import shutil
import zipfile
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any, List

from . import __package__ as _pkg  # noqa: F401  (marker for namespace)
from . import __name__ as _name  # noqa: F401

# No external utils import to keep this module self-contained.


@dataclass
class PackageInputs:
    title: str
    studio: str
    version: str
    cover_path: Optional[str] = None
    screens_path: Optional[str] = None
    gif_path: Optional[str] = None
    dest_dir: str = "dist"


class ZipPackager:
    ASSETS_FOLDER = "itch-assets"

    README_TEMPLATE = """# Itch.io Page Assets

Generated by ItchPage Wizard v{app_version} on {timestamp}

## Files Included

- **cover-630x500.png**: Main cover image (315:250 aspect ratio)
- **screens-inline-920w.png**: Screenshot collage for inline display
- **promo.gif**: Optimized promotional GIF
- **README.md**: This file
- **manifest.json**: Asset metadata (hashes, sizes, versions)

## Page Setup Checklist

### Basic Information
- [ ] Title: {title}
- [ ] Short Description (1–2 sentences)
- [ ] Detailed Description
- [ ] Genre(s) & Tags

### Media
- [ ] Upload cover-630x500.png
- [ ] Upload screens-inline-920w.png (inline)
- [ ] Upload promo.gif (≤ 3–10MB as desired)

### Visibility & Access
- [ ] Set page to Public / Draft as needed
- [ ] Add downloads or external links
- [ ] Check mobile preview

### Notes
- Generated with deterministic dimensions. If you edit assets, keep:
  - Cover = 630×500 px (315:250)
  - Collage ≤ 920 px width
"""

    def __init__(self, app_version: str = "1.0.0") -> None:
        self.app_version = app_version

    # ---- Public API ---------------------------------------------------------

    def package_all(self, inputs: PackageInputs) -> Path:
        """
        High-level convenience: creates the assets folder, writes README & manifest,
        copies assets with standardized names, and zips everything.

        Returns the path to the created ZIP file.
        """
        assets_dir = self.create_assets_folder(inputs)
        zip_path = self.zip_assets_folder(assets_dir, Path(inputs.dest_dir))
        return zip_path

    def create_assets_folder(self, inputs: PackageInputs) -> Path:
        """
        Builds the /itch-assets folder with standardized filenames and docs.
        Returns the folder path.
        """
        dest_root = Path(inputs.dest_dir)
        dest_root.mkdir(parents=True, exist_ok=True)
        assets_dir = dest_root / self.ASSETS_FOLDER
        if assets_dir.exists():
            shutil.rmtree(assets_dir)
        assets_dir.mkdir(parents=True, exist_ok=True)

        # Copy assets to standardized names if present
        std_cover = assets_dir / "cover-630x500.png"
        std_screens = assets_dir / "screens-inline-920w.png"
        std_gif = assets_dir / "promo.gif"

        if inputs.cover_path and Path(inputs.cover_path).exists():
            shutil.copy2(inputs.cover_path, std_cover)
        if inputs.screens_path and Path(inputs.screens_path).exists():
            shutil.copy2(inputs.screens_path, std_screens)
        if inputs.gif_path and Path(inputs.gif_path).exists():
            shutil.copy2(inputs.gif_path, std_gif)

        # README
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        readme_text = self.README_TEMPLATE.format(
            app_version=self.app_version,
            timestamp=timestamp,
            title=inputs.title or "",
        )
        (assets_dir / "README.md").write_text(readme_text, encoding="utf-8")

        # manifest.json
        manifest = self._build_manifest(
            title=inputs.title,
            studio=inputs.studio,
            version=inputs.version,
            assets={
                "cover": str(std_cover if std_cover.exists() else ""),
                "screens": str(std_screens if std_screens.exists() else ""),
                "gif": str(std_gif if std_gif.exists() else ""),
            },
        )
        (assets_dir / "manifest.json").write_text(
            json.dumps(manifest, indent=2), encoding="utf-8"
        )

        return assets_dir

    def zip_assets_folder(self, assets_dir: Path, out_dir: Path) -> Path:
        """
        Zips the /itch-assets folder to itch-assets-YYYYMMDD_HHMMSS.zip in out_dir.
        Returns the ZIP path.
        """
        out_dir.mkdir(parents=True, exist_ok=True)
        ts = datetime.now().strftime("%Y%m%d_%H%M%S")
        zip_path = out_dir / f"{self.ASSETS_FOLDER}-{ts}.zip"
        with zipfile.ZipFile(zip_path, "w", compression=zipfile.ZIP_DEFLATED) as zf:
            for p in sorted(assets_dir.rglob("*")):
                zf.write(p, p.relative_to(out_dir))
        return zip_path

    # ---- Internals ----------------------------------------------------------

    def _build_manifest(
        self,
        *,
        title: str,
        studio: str,
        version: str,
        assets: Dict[str, str],
    ) -> Dict[str, Any]:
        files: List[Dict[str, Any]] = []
        for name, p in assets.items():
            if not p:
                continue
            path = Path(p)
            if not path.exists():
                continue
            files.append(
                {
                    "name": name,
                    "filename": path.name,
                    "bytes": path.stat().st_size,
                }
            )

        return {
            "generator": f"ItchPage Wizard v{self.app_version}",
            "title": title,
            "studio": studio,
            "version": version,
            "created_at": datetime.now().isoformat(timespec="seconds"),
            "files": files,
        }
